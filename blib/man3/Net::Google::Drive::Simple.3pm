.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Simple 3"
.TH Simple 3 "2013-12-04" "perl v5.16.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::Google::Drive::Simple \- Simple modification of Google Drive data
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Net::Google::Drive::Simple;
\&
\&      # requires a ~/.google\-drive.yml file with an access token, 
\&      # see description below.
\&    my $gd = Net::Google::Drive::Simple\->new();
\&
\&    my $children = $gd\->children( "/folder/path" );
\&
\&    for my $child ( @$children ) {
\&
\&        next if $child\->kind() ne \*(Aqdrive#file\*(Aq;
\&
\&        next if !$child\->can( "downloadUrl" );
\&
\&        print $child\->originalFilename(), 
\&              " can be downloaded at ",
\&              $child\->downloadUrl(), 
\&              "\en";
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Net::Google::Drive::Simple authenticates with a user's Google Drive and
offers several convenience methods to list, retrieve, and modify the data
stored in the 'cloud'. See \f(CW\*(C`eg/google\-drive\-upsync\*(C'\fR as an example on how
to keep a local directory in sync with a remote directory on Google Drive.
.SS "\s-1GETTING\s0 \s-1STARTED\s0"
.IX Subsection "GETTING STARTED"
To get the access token required to access your Google Drive data via 
this module, you need to run the script \f(CW\*(C`eg/google\-drive\-init\*(C'\fR in this
distribution.
.PP
Before you run it, you need to register your 'app' with Google Drive
and obtain a client_id and a client_secret from Google:
.PP
.Vb 1
\&    https://developers.google.com/drive
.Ve
.PP
Click on \*(L"Enable the Drive \s-1API\s0 and \s-1SDK\s0\*(R", and find \*(L"Create an \s-1API\s0 project in 
the Google APIs Console\*(R". On the \s-1API\s0 console, create a new project, click
\&\*(L"Services\*(R", and enable \*(L"Drive \s-1API\s0\*(R" (leave \*(L"drive \s-1SDK\s0\*(R" off). Then, under
\&\*(L"\s-1API\s0 Access\*(R" in the navigation bar, create a client \s-1ID\s0, and make sure to 
register a an \*(L"installed application\*(R" (not a \*(L"web application\*(R"). \*(L"Redirect
URIs\*(R" should contain \*(L"http://localhost\*(R". This will get you a \*(L"Client \s-1ID\s0\*(R" 
and a \*(L"Client Secret\*(R".
.PP
Then, replace the following lines in \f(CW\*(C`eg/google\-drive\-init\*(C'\fR with the
values received:
.PP
.Vb 4
\&      # You need to obtain a client_id and a client_secret from
\&      # https://developers.google.com/drive to use this.
\&    my $client_id     = "XXX";
\&    my $client_secret = "YYY";
.Ve
.PP
Then run the script. It'll start a web server on port 8082 on your local
machine.  When you point your browser at http://localhost:8082, you'll see a
link that will lead you to Google Drive's login page, where you authenticate
and then allow the app (specified by client_id and client_secret above) access
to your Google Drive data. The script will then receive an access token from
Google Drive and store it in ~/.google\-drive.yml from where other scripts can
pick it up and work on the data stored on the user's Google Drive account. Make
sure to limit access to ~/.google\-drive.yml, because it contains the access
token that allows everyone to manipulate your Google Drive data. It also
contains a refresh token that this library uses to get a new access token
transparently when the old one is about to expire.
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP """new()""" 4
.el .IP "\f(CWnew()\fR" 4
.IX Item "new()"
Constructor, creates a helper object to retrieve Google Drive data
later. Takes an optional name of the \f(CW\*(C`.google\-drive.yml\*(C'\fR file
.Sp
.Vb 3
\&    my $gd = Net::Google::Drive::Simple\->new(
\&        config_file => "gd.yml",
\&    );
.Ve
.Sp
or uses \f(CW\*(C`~/.google\-drive.yml\*(C'\fR in the user's home directory as default.
.ie n .IP """my $children = $gd\->children( ""/path/to"" )""" 4
.el .IP "\f(CWmy $children = $gd\->children( ``/path/to'' )\fR" 4
.IX Item "my $children = $gd->children( ""/path/to"" )"
Return the entries under a given path on the Google Drive as a reference
to an array. Each entry 
is an object composed of the \s-1JSON\s0 data returned by the Google Drive \s-1API\s0.
Each object offers methods named like the fields in the \s-1JSON\s0 data, e.g.
\&\f(CW\*(C`originalFilename()\*(C'\fR, \f(CW\*(C`downloadUrl\*(C'\fR, etc.
.Sp
Will return all entries found unless \f(CW\*(C`maxResults\*(C'\fR is set:
.Sp
.Vb 1
\&    my $children = $gd\->children( "/path/to", { maxResults => 3 } )
.Ve
.Sp
Due to the somewhat capricious ways Google Drive handles its directory
structures, the method needs to traverse the path component by component
and determine the \s-1ID\s0 of each directory to get to the next level. To speed
up subsequent lookups, it also returns the \s-1ID\s0 of the last component to the
caller:
.Sp
.Vb 1
\&    my( $children, $parent ) = $gd\->children( "/path/to" );
.Ve
.Sp
If the caller now wants to e.g. insert a file into the directory, its 
\&\s-1ID\s0 is available in \f(CW$parent\fR.
.Sp
Each child comes back as a files#resource type and gets mapped into
an object that offers access to the various fields via methods:
.Sp
.Vb 3
\&    for my $child ( @$children ) {
\&        print $child\->kind(), " ", $child\->title(), "\en";
\&    }
.Ve
.Sp
Please refer to
.Sp
.Vb 1
\&    https://developers.google.com/drive/v2/reference/files#resource
.Ve
.Sp
for details on which fields are available.
.ie n .IP """my $files = $gd\->files( )""" 4
.el .IP "\f(CWmy $files = $gd\->files( )\fR" 4
.IX Item "my $files = $gd->files( )"
Return all files on the drive as a reference to an array.
Will return all entries found unless \f(CW\*(C`maxResults\*(C'\fR is set:
.Sp
.Vb 1
\&    my $files = $gd\->files( { maxResults => 3 } )
.Ve
.Sp
Note that Google limits the number of entries returned by default to
100, and seems to restrict the maximum number of files returned
by a single query to 3,500, even if you specify higher values for
\&\f(CW\*(C`maxResults\*(C'\fR.
.Sp
Each file comes back as an object that offers access to the Google
Drive item's fields, according to the \s-1API\s0 (see \f(CW\*(C`children()\*(C'\fR).
.ie n .IP """my $id = $gd\->folder_create( ""folder\-name"", $parent_id )""" 4
.el .IP "\f(CWmy $id = $gd\->folder_create( ``folder\-name'', $parent_id )\fR" 4
.IX Item "my $id = $gd->folder_create( ""folder-name"", $parent_id )"
Create a new folder as a child of the folder with the id \f(CW$parent_id\fR.
Returns the \s-1ID\s0 of the new folder or undef in case of an error.
.ie n .IP """$gd\->file_upload( $file, $dir_id )""" 4
.el .IP "\f(CW$gd\->file_upload( $file, $dir_id )\fR" 4
.IX Item "$gd->file_upload( $file, $dir_id )"
Uploads the content of the file \f(CW$file\fR into the directory with the \s-1ID\s0
\&\f(CW$dir_id\fR on Google Drive. Uses \f(CW$file\fR as the file name.
.Sp
To overwrite an existing file on Google Drive, specify the file's \s-1ID\s0 as
an optional parameter:
.Sp
.Vb 1
\&    $gd\->file_upload( $file, $dir_id, $file_id );
.Ve
.ie n .IP """$gd\->download( $item, [$local_filename] )""" 4
.el .IP "\f(CW$gd\->download( $item, [$local_filename] )\fR" 4
.IX Item "$gd->download( $item, [$local_filename] )"
Downloads an item found via \f(CW\*(C`files()\*(C'\fR or \f(CW\*(C`children()\*(C'\fR. Also accepts
the downloadUrl of an item. If \f(CW$local_filename\fR is not specified,
\&\f(CW\*(C`download()\*(C'\fR will return the data downloaded (this might be undesirable
for large files). If \f(CW$local_filename\fR is specified, \f(CW\*(C`download()\*(C'\fR will
store the downloaded data under the given file name.
.Sp
.Vb 7
\&    my $gd = Net::Google::Drive::Simple\->new();
\&    my $files = $gd\->files( { maxResults => 20 }, { page => 0 } );
\&    for my $file ( @$files ) {
\&        my $name = $file\->originalFilename();
\&        print "Downloading $name\en";
\&        $gd\->download( $file, $name ) or die "failed: $!";
\&    }
.Ve
.SH "LOGGING/DEBUGGING"
.IX Header "LOGGING/DEBUGGING"
Net::Google::Drive::Simple is Log4perl\-enabled.
To find out what's going on under the hood, turn on Log4perl:
.PP
.Vb 2
\&    use Log::Log4perl qw(:easy);
\&    Log::Log4perl\->easy_init($DEBUG);
.Ve
.SH "LEGALESE"
.IX Header "LEGALESE"
Copyright 2012 by Mike Schilli, all rights reserved.
This program is free software, you can redistribute it and/or
modify it under the same terms as Perl itself.
.SH "AUTHOR"
.IX Header "AUTHOR"
2012, Mike Schilli <cpan@perlmeister.com>
